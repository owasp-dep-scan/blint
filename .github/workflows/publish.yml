name: Upload Package

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          
      - name: Verify Project TOML Version
        id: prep
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          poetry install --no-cache --without dev
          echo "version=$(poetry version -s)" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        if: steps.prep.outcome == 'success'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          
      - name: Release PyPI
        if: steps.prep.outcome == 'success'
        run: |
          # poetry run pytest
          poetry publish --build --username $PYPI_USERNAME --password $PYPI_PASSWORD
        env:
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ github.repository }}

      - name: Build and push Docker images
        if: steps.prep.outcome == 'success'
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=blint
          cache-to: type=gha,mode=max,scope=blint
          provenance: true
          sbom: true

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: dmeta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ github.repository }}

      - name: Build and push Docker images
        if: steps.prep.outcome == 'success'
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.dmeta.outputs.tags }}
          labels: ${{ steps.dmeta.outputs.labels }}
          cache-from: type=gha,scope=blint-docker
          cache-to: type=gha,mode=max,scope=blint-docker
          provenance: true
          sbom: true

      - name: Release public ecr
        if: startsWith(github.ref, 'refs/tags/') &&  steps.prep.outcome == 'success'
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/appthreat
          docker build -t blint .
          docker tag blint:latest public.ecr.aws/appthreat/blint:latest
          docker push public.ecr.aws/appthreat/blint:latest
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}